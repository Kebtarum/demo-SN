{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/MessageItem/MessageItem.module.css","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/MessageItem/MessageItem.js","components/Dialogs/AddMessageForm/AddMessageForm.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","path","id","className","s","dialog","active","name","MessageItem","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElemenets","dialogsData","map","key","messagesElemenets","messagesData","newMessageBody","dialogs","dialogsItem","messages","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"8MAIIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAMdE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAIC,KAAKC,MAAMN,OACR,kBAACG,EAAcE,KAAKC,OADG,kBAAC,IAAD,CAAUC,GAAI,eAJT,GAEXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,oBCpB7EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,4B,oBCA3GD,EAAOC,QAAU,CAAC,YAAc,gCAAgC,OAAS,2BAA2B,OAAS,6B,oBCA7GD,EAAOC,QAAU,CAAC,QAAU,+B,wGCebC,MAVf,SAAoBN,GAChB,IAAIO,EAAO,YAAcP,EAAMQ,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASX,GAAMM,GAAOP,EAAMa,Q,kBCGzBC,MATf,SAAqBd,GAEjB,OACI,yBAAKS,UAAWC,IAAEK,SACbf,EAAMe,U,0CCFbC,EAAcC,YAAiB,IA+BtBC,EALaC,YAAU,CAClCC,KAAM,wBADkBD,EAxBL,SAACnB,GACpB,OACI,0BAAMqB,SAAUrB,EAAMsB,cAClB,6BACA,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,iBACzBa,YAAY,qBAAqBC,SAAU,CAACC,IAAUZ,MAG9D,6BACI,6CCoCDa,MA9Cf,SAAiB7B,GAEb,IAAIP,EAAQO,EAAM8B,YAEdC,EAAmBtC,EAAMuC,YAAYC,KAAI,SAACtB,GAAD,OACzC,kBAAC,EAAD,CAAYE,KAAMF,EAAOE,KAAMqB,IAAKvB,EAAOH,GAAIA,GAAIG,EAAOH,QAE1D2B,EAAoB1C,EAAM2C,aAAaH,KAAI,SAAClB,GAAD,OAC3C,kBAAC,EAAD,CAAaA,QAASA,EAAQA,QAASmB,IAAKnB,EAAQP,QAqBxD,OAjBqBf,EAAM4C,eAkBvB,yBAAK5B,UAAWC,IAAE4B,SACd,yBAAK7B,UAAWC,IAAE6B,aACbR,GAGL,yBAAKtB,UAAWC,IAAE8B,UACbL,GAEL,6BACI,kBAAC,EAAD,CAAqBd,SAdb,SAACoB,GACjBzC,EAAM0C,YAAYD,EAAOJ,sB,wBCyBlBM,4BACXxC,aAxBkB,SAACV,GACnB,MAAM,CACFqC,YAAarC,EAAMqC,gBAIF,SAACc,GACtB,MAAM,CAIFF,YAAa,SAACL,GACVO,EAASC,YAAmBR,SAapCzC,IAFW+C,CAGbd","file":"static/js/4.ae9081b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render(){\r\n            if(!this.props.isAuth) return <Redirect to={'/login'} />\r\n            return <Component {...this.props} />        }\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3UZOd\",\"dialogsItem\":\"Dialogs_dialogsItem__1K0ou\",\"messages\":\"Dialogs_messages__uC7e-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItem\":\"DialogItem_dialogsItem__Mya7W\",\"active\":\"DialogItem_active__3x767\",\"dialog\":\"DialogItem_dialog__vPQAY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessageItem_message__1BSqU\"};","import React from 'react'\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\n\r\n\r\nfunction DialogItem(props){\r\n    let path = \"/dialogs/\" + props.id\r\n    return(\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to = {path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react'\r\nimport s from './MessageItem.module.css'\r\n\r\n\r\nfunction MessageItem(props){\r\n    \r\n    return(\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n            <Field component={Textarea} name='newMessageBody' \r\n                    placeholder='Enter your message' validate={[required, maxLength50]}\r\n            />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>             \r\n            </div>\r\n            {/* <div>\r\n                <textarea                                    //////До Field redux-form\r\n                    value={newMessageBody}\r\n                    onChange={onNewMessageChange}\r\n                    placeholder='Enter your message'></textarea>\r\n            </div>\r\n            <div>\r\n                <button onClick={onSendMessageClick}>Send</button>\r\n            </div> */}\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'dialogAddMessageForm',\r\n\r\n})(AddMessageForm);\r\n\r\nexport default AddMessageFormRedux;","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\n\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport AddMessageFormRedux from './AddMessageForm/AddMessageForm'\r\n\r\nfunction Dialogs(props) {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElemenets = state.dialogsData.map((dialog) => (\r\n        <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />\r\n    ));\r\n    let messagesElemenets = state.messagesData.map((message) => (\r\n        <MessageItem message={message.message} key={message.id} />\r\n    ));\r\n\r\n\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    // let onSendMessageClick = () => {                         До redux-form\r\n    //     props.sendMessage();\r\n    //     //props.dispatch(sendMessageCreator());\r\n    // };\r\n\r\n    // let onNewMessageChange = (e) => {\r\n    //     let body = e.target.value;\r\n    //     props.updateNewMessageBody(body);\r\n    //     //props.dispatch(updateNewMessageBodyCreator(body));\r\n    // };\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElemenets}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElemenets}\r\n            </div>\r\n            <div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n// const AddMessageForm = (props) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <div>\r\n//             <Field component={Textarea} name='newMessageBody' \r\n//                     placeholder='Enter your message' validate={[required, maxLength50]}\r\n//             />\r\n//             </div>\r\n//             <div>\r\n//                 <button>Send</button>             \r\n//             </div>\r\n//             {/* <div>\r\n//                 <textarea                                    //////До Field redux-form\r\n//                     value={newMessageBody}\r\n//                     onChange={onNewMessageChange}\r\n//                     placeholder='Enter your message'></textarea>\r\n//             </div>\r\n//             <div>\r\n//                 <button onClick={onSendMessageClick}>Send</button>\r\n//             </div> */}\r\n//         </form>\r\n//     )\r\n// }\r\n\r\n// const AddMessageFormRedux = reduxForm({\r\n//     form: 'dialogAddMessageForm',\r\n\r\n// })(AddMessageForm);\r\n\r\n","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\n\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport { updateNewMessageBodyCreator, sendMessageCreator } from '../../redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from \"react-redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n// function DialogsContainer(props) {\r\n\r\n//     let state = props.store.getState().dialogsPage;\r\n\r\n\r\n//     let onSendMessageClick = () => {\r\n//         props.store.dispatch(sendMessageCreator());\r\n//     };\r\n\r\n//     let onNewMessageChange = (body) => {\r\n//         props.store.dispatch(updateNewMessageBodyCreator(body));\r\n//     };\r\n\r\n//     return (\r\n//         <Dialogs \r\n//             updateNewMessageBody = {onNewMessageChange} \r\n//             sendMessage = {onSendMessageClick}\r\n//             dialogsPage = {state}\r\n//         />\r\n//     );\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        // updateNewMessageBody: (body) => {\r\n        //     dispatch(updateNewMessageBodyCreator(body));          До redux-form\r\n        // },\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n///// COMPOSE заменяет все что закомменчено ниже\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n// const DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(AuthRedirectComponent)\r\n\r\n// export default DialogsContainer;\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}